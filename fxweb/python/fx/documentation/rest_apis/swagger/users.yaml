openapi: 3.0.0

info:
  version: "1.1.4"
  title: 'Users'
  description: |
    ***
    ### Authentication Methods
    ***
    + HTTP Bearer token (JSON web token)
    ***
    ### Special Notes
    ***
    +

security:
  - session: []
    XSRF-TOKEN: []

paths:
  '/users':
    post:
      tags:
        - CRUD Operations
      summary: 'Create a single User'
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + RKCU
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        + 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
            examples:
              'Create single User':
                $ref: '#/components/examples/CreateUser'
      responses:
        '201':
          $ref: '#/components/responses/201-Created'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

    get:
      tags:
        - CRUD Operations
      summary: "Retrieve a single User's details, or a list of Users."
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + RKRI (single)
          + PGUS (list)
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        + **No parameters** - Retrieve a list of all users
        + **Please Note** - page and pageCount can be used when retrieving a list of users
      parameters:
        - name: username
          description: 'Specific User to filter by.'
          in: query
          schema:
            type: string
        - name: usergroup
          description: 'Parent User Group to filter by.'
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageCount'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                # Either return a list of users, or a user object based on query parameter
                oneOf:
                  - $ref: '#/components/schemas/RetrieveUser'
                  - $ref: '#/components/schemas/RetrieveUserList'
              examples:
                'Retrieve a single User':
                  $ref: '#/components/examples/RetrieveUser'
                'Retrieve a list of Users':
                  $ref: '#/components/examples/RetrieveUserList'
                'Retrieve a list of Users (filtered)':
                  $ref: '#/components/examples/RetrieveUserListFiltered'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

    put:
      tags:
        - CRUD Operations
      summary: 'Update user, move user group, or change user password'
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + RKUU
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        +
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
            examples:
              'Update a single User':
                $ref: '#/components/examples/UpdateUser'
      responses:
        '200':
          $ref: '#/components/responses/200-OK'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

    delete:
      tags:
        - CRUD Operations
      summary: 'Delete specified user'
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + RKDU
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        +
      parameters:
        - name: username
          in: query
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200-OK'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

  '/users/move':
    put:
      tags:
        - Other Operations
      summary: 'Move a single user from one User Group to another.'
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + RKMU
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        +
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveUser'
            examples:
              'Move a single User':
                $ref: '#/components/examples/MoveUser'
      responses:
        '200':
          $ref: '#/components/responses/200-OK'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

  '/users/change-password':
    post:
      tags:
        - Other Operations
      summary: "Change a user's password."
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + RKNP
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        +
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
            examples:
              'Change User password':
                $ref: '#/components/examples/ChangePassword'
      responses:
        '200':
          $ref: '#/components/responses/200-OK'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

components:
  securitySchemes:
    session:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/securitySchemes/session'
    XSRF-TOKEN:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/securitySchemes/XSRF-TOKEN'

  parameters:
    page:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/parameters/page'
    pageCount:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/parameters/pageCount'
  
  schemas:
    UserOverview:
      type: object
      properties:
        username:
          type: string
        primaryGroup:
          type: string
        subGroups:
          type: array
          items:
            type: string
    UserMetaData:
      type: object
      properties:
        enabled:
          type: boolean
        lastLogin:
          type: string
          format: 'ISO-8601'
    UserPersonalInfo:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        commonName:
          type: string
        mobileCarrier:
          type: string
          enum: ['Alltell','ATT','Boost','Comcast','Qwest','Sprint','Tmobile','Trac','Verizon',
            'Virgin','Rogers','Vodacom','MTNGroup','Custom','None']
        phone:
          type: string
        email:
          type: string
          format: email
    CreateUser:
      allOf:
        - $ref: '#/components/schemas/UserOverview'
        - $ref: '#/components/schemas/UserPersonalInfo'
        - type: object
          properties:
            newPassword:
              type: string
              format: 'Base64'
    RetrieveUser:
      allOf:
        - $ref: '#/components/schemas/ResponseBase'
        - type: object
          properties:
            response:
              allOf:
                - $ref: '#/components/schemas/UserOverview'
                - $ref: '#/components/schemas/UserMetaData'
                - $ref: '#/components/schemas/UserPersonalInfo'
    RetrieveUserList:
      allOf:
        - $ref: '#/components/schemas/ResponseBase'
        - type: object
          properties:
            response:
              allOf:
                - $ref: '#/components/schemas/PaginationBase'
                - type: object
                  properties:
                    users:
                      type: array
                      items:
                        allOf:
                          - $ref: '#/components/schemas/UserOverview'
                          - $ref: '#/components/schemas/UserMetaData'
    UpdateUser:
      allOf:
        - type: object
          properties:
            username:
              type: string
        - $ref: '#/components/schemas/UserPersonalInfo'
        - required:
          - username
          - personalInfo
          - commonName
          - firstName
          - lastName
          - mobileCarrier
          - phone
          - email
    MoveUser:
      type: object
      properties:
        username:
          type: string
        newGroup:
          type: string
        oldPassword:
          type: string
          format: 'Base64'
        newPassword:
          type: string
          format: 'Base64'
      required:
        - username
        - newGroup
    ChangePassword:
      type: object
      properties:
        username:
          type: string
        oldPassword:
          type: string
          format: 'Base64'
        newPassword:
          type: string
          format: 'Base64'
      required:
        - username
        - oldPassword
        - newPassword
    ResponseBase:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/schemas/ResponseBase'
    PaginationBase:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/schemas/PaginationBase'


  responses:
    200-OK:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/200-OK'
    201-Created:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/201-Created'
    400-BadRequest:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/400-BadRequest'
    401-Unauthorized:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/401-Unauthorized'
    403-Forbidden:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/403-Forbidden'
    404-NotFound:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/404-NotFound'
    500-InternalError:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/500-InternalError'

  examples:
    CreateUser:
      value:
        username: 'User1'
        primaryGroup: 'Admin'
        subGroups:
          - 'Child Group1'
          - 'Child Group2'
        firstName: 'User'
        lastName: 'One'
        commonName: 'User One'
        mobileCarrier: 'ATT'
        phone: '(555) 867-5309'
        email: 'engineering@futurex.com'
        newPassword: 'V2VzdGVyb3M='
    RetrieveUser:
      value:
        status: 'success'
        message: ''
        response:
          username: 'User1'
          primaryGroup: 'Admin'
          subGroups:
           - 'Child Group1'
           - 'Child Group2'
          enabled: true
          lastLogin: '2019-12-10T23:59:59+0000'
          firstName: 'User'
          lastName: 'One'
          commonName: 'User One'
          mobileCarrier: 'ATT'
          phone: '(555) 867-5309'
          email: 'engineering@futurex.com'
    RetrieveUserList:
      value:
        status: 'success'
        message: ''
        response:
          totalItems: 3
          totalPages: 1
          pageCount: 50
          currentPage: 1
          nextPage: 1
          users:
            - username: 'User1'
              primaryGroup: 'Admin'
              subGroups:
               - 'Child Group1'
               - 'Child Group2'
              enabled: true
              lastLogin: '2019-12-10T23:59:59+0000'
            - username: 'User2'
              primaryGroup: 'Child Group1'
              subGroups: []
              enabled: true
              lastLogin: '2019-12-10T23:59:59+0000'
            - username: 'User Three'
              primaryGroup: 'Child Group2'
              subGroups: []
              enabled: false
              lastLogin: '2019-12-10T23:59:59+0000'
    RetrieveUserListFiltered:
      value:
        status: 'success'
        message: ''
        response:
          totalItems: 2
          totalPages: 1
          pageCount: 50
          currentPage: 1
          nextPage: 1
          users:
            - username: 'User1'
              primaryGroup: 'Admin'
              subGroups:
               - 'Child Group1'
               - 'Child Group2'
              enabled: true
              lastLogin: '2019-12-10T23:59:59+0000'
            - username: 'User2'
              primaryGroup: 'Child Group1'
              subGroups: []
              enabled: true
              lastLogin: '2019-12-10T23:59:59+0000'
    UpdateUser:
      value:
        username: 'User1'
        firstName: 'User'
        lastName: 'One'
        commonName: 'User One'
        mobileCarrier: 'ATT'
        phone: '(555) 867-5309'
        email: 'engineering@futurex.com'
    MoveUser:
      value:
        username: 'User1'
        newGroup: 'Group2'
        oldPassword: 'V2VzdGVyb3M='
        newPassword: 'RXNzb3M='
    ChangePassword:
      value:
        username: 'User1'
        oldPassword: 'V2VzdGVyb3M='
        newPassword: 'RXNzb3M='
