openapi: 3.0.0

info:
  version: "1.0.2"
  title: 'Key Groups'
  description: |-
    # Create, retrieve, update, delete, copy, and move Key Group objects #
    ---
    * __Key Groups__ are objects that can act as a folder or a store.<br>
    * __Folders__ can store other folders, stores, and user-generated keys<br>
      * Users can create a sub-folder, sub-store, or a key in a folder
    * __Stores__ can only store auto-generated keys<br>
      * Users should __not__ be able to create a sub-folder, sub-store, or a key in a store<br>
      * Keys related to a store an automatically generated by the HSM
    
    __Example__
    ```
    ####################
    # Legacy Structure #
    ####################
    Group
    │  Group
    │  │  Template
    │  │  Auto Key (Generated by template)
    │  └  User Key
    └  Group
       │  User Key
       └  User Key

    #################
    # New Structure #
    #################
    Folder
    │  Store
    │  │  Template (Hidden from user, shown as part of the store)
    │  └  Auto Key
    │  User Key
    └  Folder
       │  User Key
       └  User Key
    ```

# Added by API Auto Mocking Plugin

security:
  - session: []
    XSRF-TOKEN: []

paths:
  '/key-groups':
    get:
      tags:
        - Key Groups
      summary: 'Retrieve a list of Key Folders and Key Stores'
      description: |
        **No parameters**
        * Retrieve a list of top-level Key Groups (i.e. Key Groups without a parent folder)

        **Parameters**
        * *page* - Specific page to be returned (default: 1)
        * *pageCount* - Number of items per page to be returned (default: 50)
        * *id* - Retrieve details about a specific Key Group.
        * *parentId* - Retrieve a list of child Key Groups related to a specific folder
        * *filter* - Retrieve a filtered list of Key Groups

        **Notes on using the *filter* parameter**
        * *filter* accepts a URI Encoded Base64 JSON object to filter the request's response
        * To build a filter:
          * First construct an array of JSON object(s)
          * Base64 encode the array
          * URI Encode the Base64 string
        * Any number of JSON objects can be sent
        * The object should contain type, attribute, value, negate, and match properties

        Filter Property | Description
        ----------------|------------
        **type** (string) | Type of object to be filtered (e.g key group or key)
        **attribute** (string) | The attribute to be filtered (e.g. name or key type)
        **value** (string) | The value to be used for evaluation
        **negate** (boolean) | Logic to be used for evaluation (i.e. "is" or "is not")
        **match** (string, ['partial','exact']) | Partial or exact match
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageCount'
        - $ref: '#/components/parameters/ObjectFilter'
        - name: id
          in: query
          schema:
            type: string
            format: uuid
        - name: parentId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveKeyGroupList'
              examples:
                'Retrieve top-level list':
                  $ref: '#/components/examples/RetrieveKeyGroupList'
                'Retrieve a list of child Key Folders & Key Stores':
                  $ref: '#/components/examples/RetrieveChildKeyGroups'
                'Retrieve a list of Key Folders & Key Stores (filtered)':
                  $ref: '#/components/examples/RetrieveKeyGroupListFiltered'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

  '/key-groups/folders':
    post:
      tags:
        - Key Folders
      summary: 'Create single Key Folder'
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + RKCS
          + RKPM
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeyFolder'
            examples:
              'Create single Key Folder':
                $ref: '#/components/examples/CreateKeyFolder'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateKeyFolderResponse'
              examples:
                'Create single Key Folder response':
                  $ref: '#/components/examples/CreateKeyFolderResponse'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'
    get:
      tags:
        - Key Folders
      summary: 'Retrieve a single Key Folder, or a list of Key Folders'
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + 
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        + 
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveKeyFolder'
              examples:
                'Retrieve single Key Folder':
                  $ref: '#/components/examples/RetrieveKeyFolder'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'
    put:
      tags:
        - Key Folders
      summary: 'Update single Key Folder'
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + 
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        + 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKeyFolder'
            examples:
              'Update single Key Folder':
                $ref: '#/components/examples/UpdateKeyFolder'
      responses:
        '200':
          $ref: '#/components/responses/200-OK'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'
    delete:
      tags:
        - Key Folders
      summary: 'Delete single Key Folder'
      description: |
        **Parameters**
        * *id* - The UUID of the Key Group to be deleted (required)
      parameters:
        - name: id
          in: query
          schema:
            type: string
            format: uuid
          required: true
          description: 'UUID of the folder to be deleted'
      responses:
        '200':
          $ref: '#/components/responses/200-OK'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

  '/key-groups/folders/copy':
    post:
      tags:
        - Key Folders - Other Operations
      summary: 'Copy single Key Folder'
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyKeyGroup'
            examples:
              'Copy single Key Folder':
                $ref: '#/components/examples/CopyKeyFolder'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CopyKeyGroupResponse'
              examples:
                'Copy single Key Folder or Store':
                  $ref: '#/components/examples/CopyKeyGroupResponse'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

  '/key-groups/folders/move':
    put:
      tags:
        - Key Folders - Other Operations
      summary: 'Move single Key Folder'
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + RKES
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        + 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveKeyGroup'
            examples:
              'Move single Key Folder':
                $ref: '#/components/examples/MoveKeyFolder'
      responses:
        '200':
          $ref: '#/components/responses/200-OK'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

  '/key-groups/stores':
    post:
      tags:
        - Key Stores
      summary: 'Create single Key Store'
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + 
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        + **rotationPeriod** only applies when the rotation policy algorithm is set to "regenerative"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeyStore'
            examples:
              'Create single Key Store':
                $ref: '#/components/examples/CreateKeyStore'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateKeyStoreResponse'
              examples:
                'Create single Key Store response':
                  $ref: '#/components/examples/CreateKeyStoreResponse'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'
    get:
      tags:
        - Key Stores
      summary: 'Retrieve a single Key Store, or a list of Key Stores'
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + 
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        + 
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveKeyStore'
              examples:
                'Retrieve single Key Store':
                  $ref: '#/components/examples/RetrieveKeyStore'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'
    put:
      tags:
        - Key Stores
      summary: 'Update single Key Store'
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + 
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        + 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKeyStore'
            examples:
              'Update single Key Store':
                $ref: '#/components/examples/UpdateKeyStore'
      responses:
        '200':
          $ref: '#/components/responses/200-OK'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'
    delete:
      tags:
        - Key Stores
      summary: 'Delete single Key Store'
      description: |
        **Parameters**
        * *id* - The UUID of the Key Group to be deleted (required)
      parameters:
        - name: id
          in: query
          schema:
            type: string
            format: uuid
          required: true
          description: 'UUID of the folder to be deleted'
      responses:
        '200':
          $ref: '#/components/responses/200-OK'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

  '/key-groups/stores/copy':
    post:
      tags:
        - Key Stores - Other Operations
      summary: 'Copy single Key Store'
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyKeyGroup'
            examples:
              'Copy single Key Store':
                $ref: '#/components/examples/CopyKeyStore'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CopyKeyGroupResponse'
              examples:
                'Copy single Key Folder or Store':
                  $ref: '#/components/examples/CopyKeyGroupResponse'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

  '/key-groups/stores/move':
    put:
      tags:
        - Key Stores - Other Operations
      summary: 'Move single Key Store'
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + RKES
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        + 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveKeyGroup'
            examples:
              'Move single Key Folder':
                $ref: '#/components/examples/MoveKeyStore'
      responses:
        '200':
          $ref: '#/components/responses/200-OK'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

  '/key-groups/stores/rotate':
    post:
      tags:
        - Key Stores - Other Operations
      summary: 'Rotate keys within a Key Store'
      description: |
        ***
        ### Requirements
        ***
        + **Features**
          + 
        + **Host API Commands**
          + 
        + **Permissions**
          +
        ***
        ### Additional Notes
        ***
        + 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RotateKeyStore'
            examples:
              'Rotate single Key Store':
                $ref: '#/components/examples/RotateKeyStore'
      responses:
        '200':
          $ref: '#/components/responses/200-OK'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        default:
          $ref: '#/components/responses/500-InternalError'

components:
  securitySchemes:
    session:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/securitySchemes/session'
    XSRF-TOKEN:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/securitySchemes/XSRF-TOKEN'

  parameters:
    page:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/parameters/page'
    pageCount:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/parameters/pageCount'
    ObjectFilter:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/parameters/ObjectFilter'

  schemas:
    GroupId:
      type: string
      format: uuid
      default: ''
    SharedProperties:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GroupId'
        name:
          type: string
        type:
          type: string
          enum: ['folder', 'store']
        parentId:
          $ref: '#/components/schemas/GroupId'
    PermissionsProperty:
      type: object
      additionalProperties:
        # Permissions are dynamically returned based on permissions
        # set during object creation, or permissions set during object
        # update.
        type: string
        enum: ['View','Use','Modify','Delete','Add']
    RotationPolicyProperty:
      type: object
      properties:
        algorithm:
          type: string
          enum: ['Date-Based','Unique-Key']
        rotationPeriod:
          $ref: '#/components/schemas/RotationPeriod'
    KeyPolicyProperty:
      type: object
      properties:
        keyType:
          $ref: '#/components/schemas/KeyType'
        keyUsage:
          $ref: '#/components/schemas/KeyUsage'
        majorKey:
          $ref: '#/components/schemas/MajorKey'
        algorithm:
          $ref: '#/components/schemas/KeyAlgorithm'
        clearExport:
          type: boolean
          default: false
        validityPeriod:
          $ref: '#/components/schemas/RotationPeriod'
        tr31Header:
          type: string
    RetrieveKeyGroupList:
      allOf:
        - $ref: '#/components/schemas/ResponseBase'
        - type: object
          properties:
            response:
              allOf:
                - $ref: '#/components/schemas/PaginationBase'
                - type: object
                  properties:
                    groups:
                      type: array
                      items:
                        anyOf:
                          - $ref: '#/components/schemas/RetrieveKeyStoreList'
                          - $ref: '#/components/schemas/RetrieveKeyFolderList'
    RetrieveKeyStoreList:
      allOf:
        - $ref: '#/components/schemas/SharedProperties'
        - type: object
          properties:
            numKeys:
              type: integer
              minimum: 0
              default: 0
    RetrieveKeyFolderList:
      allOf:
        - $ref: '#/components/schemas/RetrieveKeyStoreList'
        - type: object
          properties:
            numFolders:
              type: integer
              minimum: 0
              default: 0
            numStores:
              type: integer
              minimum: 0
              default: 0
    CopyKeyGroup:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GroupId'
        newName:
          type: string
      required:
        - id
        - newName
    CopyKeyGroupResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseBase'
        - type: object
          properties:
            response:
              type: object
              properties:
                id:
                  $ref: '#/components/schemas/GroupId'
    MoveKeyGroup:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GroupId'
        newParentId:
          $ref: '#/components/schemas/GroupId'
      required:
        - id
        - newParentId
    CreateKeyFolder:
      type: object
      properties:
        name:
          type: string
        parentId:
          $ref: '#/components/schemas/GroupId'
        owner:
          type: string
          default: ''
        mailAddress:
          type: string
          default: ''
        permissions:
          $ref: '#/components/schemas/PermissionsProperty'
      required:
        - name
    CreateKeyFolderResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseBase'
        - type: object
          properties:
            response:
              type: object
              properties:
                id:
                  $ref: '#/components/schemas/GroupId'
              required:
                - id
    RetrieveKeyFolder:
      allOf:
        - $ref: '#/components/schemas/ResponseBase'
        - type: object
          properties:
            response:
              allOf:
                - type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/GroupId'
                  required:
                    - id
                - $ref: '#/components/schemas/CreateKeyFolder'
    UpdateKeyFolder:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GroupId'
        newName:
          type: string
        owner:
          type: string
        mailAddress:
          type: string
        permissions:
          $ref: '#/components/schemas/PermissionsProperty'
      required:
        - id
    CreateKeyStore:
      allOf:
        - $ref: '#/components/schemas/CreateKeyFolder'
        - type: object
          properties:
            rotationPolicy:
              $ref: '#/components/schemas/RotationPolicyProperty'
            keyPolicy:
              $ref: '#/components/schemas/KeyPolicyProperty'
    CreateKeyStoreResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseBase'
        - type: object
          properties:
            response:
              type: object
              properties:
                id:
                  $ref: '#/components/schemas/GroupId'
              required:
                - id
    RetrieveKeyStore:
      allOf:
        - $ref: '#/components/schemas/ResponseBase'
        - type: object
          properties:
            response:
              allOf:
                - type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/GroupId'
                  required:
                    - id
                - $ref: '#/components/schemas/CreateKeyStore'
    UpdateKeyStore:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GroupId'
        newName:
          type: string
        mailAddress:
          type: string
        rotationPolicy:
          $ref: '#/components/schemas/RotationPolicyProperty'
        keyPolicy:
          $ref: '#/components/schemas/KeyPolicyProperty'
      required:
        - id
    RotateKeyStore:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GroupId'
      required:
        - id
    RotateKeyStoreResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseBase'
        - type: object
          properties:
            response:
              type: object
              properties:
                jobId:
                  $ref: '#/components/schemas/GroupId'
              required:
                - id
    ResponseBase:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/schemas/ResponseBase'
    PaginationBase:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/schemas/PaginationBase'
    ObjectFilter:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/schemas/ObjectFilter'
    KeyType:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/schemas/KeyType'
    KeyUsage:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/schemas/KeyUsage'
    MajorKey:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/schemas/MajorKey'
    KeyAlgorithm:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/schemas/KeyAlgorithm'
    RotationPeriod:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/schemas/RotationPeriod'

  responses:
    200-OK:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/200-OK'
    201-Created:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/201-Created'
    400-BadRequest:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/400-BadRequest'
    401-Unauthorized:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/401-Unauthorized'
    403-Forbidden:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/403-Forbidden'
    404-NotFound:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/404-NotFound'
    500-InternalError:
      $ref: 'https://api.swaggerhub.com/domains/Futurex/common/1.0.0#/components/responses/500-InternalError'

  examples:
    RetrieveKeyGroupList:
      value:
        status: 'Success'
        message: ''
        response:
          totalItems: 3
          totalPages: 1
          pageCount: 50
          currentPage: 1
          nextPage: 1
          groups:
            - id: '4f417574682d686f7374'
              name: 'Oauth-Host'
              type: 'folder'
              parentId: ''
              numKeys: 5
              numFolders: 3
              numStores: 1
            - id: '546f6b656e697a6174696f6e'
              name: 'Tokenization'
              type: 'folder'
              parentId: ''
              numKeys: 7
              numFolders: 1
              numStores: 0
            - id: '526f6f74206b65792073746f7265'
              name: 'Root key store'
              type: 'store'
              parentId: ''
              numKeys: 50
    RetrieveKeyGroupListFiltered:
      value:
        status: 'Success'
        message: ''
        response:
          totalItems: 2
          totalPages: 1
          pageCount: 50
          currentPage: 1
          nextPage: 1
          groups:
            - id: '4f417574682d686f7374'
              name: 'Oauth-Host'
              type: 'folder'
              parentId: ''
              numKeys: 5
              numFolders: 3
              numStores: 1
            - id: '546f6b656e697a6174696f6e'
              name: 'Tokenization'
              type: 'folder'
              parentId: ''
              numKeys: 7
              numFolders: 1
    RetrieveChildKeyGroups:
      value:
        status: 'Success'
        message: ''
        response:
          totalItems: 2
          totalPages: 1
          pageCount: 50
          currentPage: 1
          nextPage: 1
          groups:
            - id: '4368696c6420666f6c646572'
              name: 'Child folder'
              type: 'folder'
              parentId: '4f417574682d686f7374'
              numKeys: 2
              numFolders: 1
              numStores: 0
            - id: '4368696c64206b65792073746f7265'
              name: 'Child key store'
              type: 'store'
              parentId: '4f417574682d686f7374'
              numKeys: 50
    CopyKeyGroup:
      value:
        id: '5365636f6e64206368696c6420666f6c646572'
        newName: 'Awesome Store'
    CopyKeyGroupResponse:
      value:
        status: 'Success'
        message: ''
        response:
          id: '436f706965642073746f7265'
    MoveKeyGroup:
      value:
        id: '436f706965642073746f7265'
        newParentId: '546f6b656e697a6174696f6e'
    CreateKeyFolder:
      value:
        name: 'Second child folder'
        parentId: '4368696c6420666f6c646572'
        owner: 'Futurex'
        mailAddress: 'Engineering Campus'
        permissions:
          'Admin Group': 'Add'
          'Group 2': 'Use'
    CreateKeyFolderResponse:
      value:
        status: 'Success'
        message: ''
        response:
          id: '5365636f6e64206368696c6420666f6c646572'
    RetrieveKeyFolder:
      value:
        status: 'Success'
        message: ''
        response:
          id: '4f417574682d686f7374'
          name: 'Oauth-Host'
          parentId: ''
          owner: 'Futurex'
          mailAddress: 'Engineering Campus'
          permissions:
            'Admin Group': 'Add'
            'Group 2': 'Add'
    UpdateKeyFolder:
      value:
        id: '5365636f6e64206368696c6420666f6c646572'
        newName: 'Better Folder Name'
        permissions:
          'Group 2': 'Delete'
    CopyKeyFolder:
      value:
        id: '5365636f6e64206368696c6420666f6c646572'
        newName: 'Key Folder - Copy'
    MoveKeyFolder:
      value:
        id: '5365636f6e64206368696c6420666f6c646572'
        newParentId: '436f706965642073746f7265'
    CreateKeyStore:
      value:
        name: 'Child key store 2'
        type: 'store'
        parentId: '5365636f6e64206368696c6420666f6c646572'
        owner: 'Futurex'
        mailAddress: 'Data Center'
        rotationPolicy:
          algorithm: 'Regenerative'
          rotationPeriod:
            period: 6
            frequency: 'Months'
        keyPolicy:
          keyType: 'Message authentication key (MAC key)'
          keyUsage: 'Wrap'
          majorKey: 'MFK'
          algorithm: 'AES256'
          clearExport: true
          validityPeriod:
            period: 6
            frequency: 'Months'
          tr31Header: '00'
        permissions:
          'Admin Group': 'Add'
          'Child Group 1': 'Use'
          'Child Group 2': 'Use'
    CreateKeyStoreResponse:
      value:
        status: 'Success'
        message: ''
        response:
          id: '4368696c64206b65792073746f72652032'
    RetrieveKeyStore:
      value:
        status: 'Success'
        message: ''
        response:
          id: '526f6f74206b65792073746f7265'
          name: 'Root key store'
          type: 'folder'
          parentId: ''
          owner: 'Futurex'
          mailAddress: 'Data center'
          rotationPolicy:
            algorithm: 'Regenerative'
            rotationPeriod:
              period: 2
              frequency: 'Weeks'
          keyPolicy:
            keyType: 'Key encryption key'
            keyUsage: 'Wrap/Unwrap'
            majorKey: 'MFK'
            algorithm: 'AES128'
            clearExport: false
            validityPeriod:
              period: 2
              frequency: 'Weeks'
            tr31Header: '00'
          permissions:
            'Admin Group': 'Add'
    UpdateKeyStore:
      value:
        id: '4368696c64206b65792073746f72652032'
        newName: 'Better Store Name'
        mailAddress: 'Futurex Engineering'
        keyPolicy:
          clearExport: false
          validityPeriod:
            period: 1
            frequency: 'Years'
    CopyKeyStore:
      value:
        id: '5365636f6e64206368696c6420666f6c646572'
        newName: 'Key Store - Copy'
    MoveKeyStore:
      value:
        id: '5365636f6e64206368696c6420666f6c646572'
        newParentId: ''
    RotateKeyStore:
      value:
        id: '4368696c64206b65792073746f72652032'
    RotateKeyStoreResponse:
      value:
        status: 'Success'
        message: ''
        response:
